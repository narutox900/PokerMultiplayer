// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_game_2eproto_metadata_getter(int index);
namespace game {
class BetTurn;
struct BetTurnDefaultTypeInternal;
extern BetTurnDefaultTypeInternal _BetTurn_default_instance_;
class Card;
struct CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class ClientBet;
struct ClientBetDefaultTypeInternal;
extern ClientBetDefaultTypeInternal _ClientBet_default_instance_;
class DealCards;
struct DealCardsDefaultTypeInternal;
extern DealCardsDefaultTypeInternal _DealCards_default_instance_;
class DealCommunityCards;
struct DealCommunityCardsDefaultTypeInternal;
extern DealCommunityCardsDefaultTypeInternal _DealCommunityCards_default_instance_;
class Deck;
struct DeckDefaultTypeInternal;
extern DeckDefaultTypeInternal _Deck_default_instance_;
class DoneBet;
struct DoneBetDefaultTypeInternal;
extern DoneBetDefaultTypeInternal _DoneBet_default_instance_;
class EndRound;
struct EndRoundDefaultTypeInternal;
extern EndRoundDefaultTypeInternal _EndRound_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Result_EndPlayer;
struct Result_EndPlayerDefaultTypeInternal;
extern Result_EndPlayerDefaultTypeInternal _Result_EndPlayer_default_instance_;
class StartGame;
struct StartGameDefaultTypeInternal;
extern StartGameDefaultTypeInternal _StartGame_default_instance_;
class StartGameRequest;
struct StartGameRequestDefaultTypeInternal;
extern StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::BetTurn* Arena::CreateMaybeMessage<::game::BetTurn>(Arena*);
template<> ::game::Card* Arena::CreateMaybeMessage<::game::Card>(Arena*);
template<> ::game::ClientBet* Arena::CreateMaybeMessage<::game::ClientBet>(Arena*);
template<> ::game::DealCards* Arena::CreateMaybeMessage<::game::DealCards>(Arena*);
template<> ::game::DealCommunityCards* Arena::CreateMaybeMessage<::game::DealCommunityCards>(Arena*);
template<> ::game::Deck* Arena::CreateMaybeMessage<::game::Deck>(Arena*);
template<> ::game::DoneBet* Arena::CreateMaybeMessage<::game::DoneBet>(Arena*);
template<> ::game::EndRound* Arena::CreateMaybeMessage<::game::EndRound>(Arena*);
template<> ::game::Player* Arena::CreateMaybeMessage<::game::Player>(Arena*);
template<> ::game::Result* Arena::CreateMaybeMessage<::game::Result>(Arena*);
template<> ::game::Result_EndPlayer* Arena::CreateMaybeMessage<::game::Result_EndPlayer>(Arena*);
template<> ::game::StartGame* Arena::CreateMaybeMessage<::game::StartGame>(Arena*);
template<> ::game::StartGameRequest* Arena::CreateMaybeMessage<::game::StartGameRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class Card PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Card) */ {
 public:
  inline Card() : Card(nullptr) {}
  virtual ~Card();
  explicit constexpr Card(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Card(const Card& from);
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  inline Card& operator=(Card&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Card& default_instance() {
    return *internal_default_instance();
  }
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }
  inline void Swap(Card* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(nullptr);
  }

  Card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Card";
  }
  protected:
  explicit Card(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kSuitFieldNumber = 2,
  };
  // uint32 num = 1;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 suit = 2;
  void clear_suit();
  ::PROTOBUF_NAMESPACE_ID::uint32 suit() const;
  void set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suit() const;
  void _internal_set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.Card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Deck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Deck) */ {
 public:
  inline Deck() : Deck(nullptr) {}
  virtual ~Deck();
  explicit constexpr Deck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deck(const Deck& from);
  Deck(Deck&& from) noexcept
    : Deck() {
    *this = ::std::move(from);
  }

  inline Deck& operator=(const Deck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deck& operator=(Deck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Deck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deck* internal_default_instance() {
    return reinterpret_cast<const Deck*>(
               &_Deck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Deck& a, Deck& b) {
    a.Swap(&b);
  }
  inline void Swap(Deck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deck* New() const final {
    return CreateMaybeMessage<Deck>(nullptr);
  }

  Deck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deck& from);
  void MergeFrom(const Deck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Deck";
  }
  protected:
  explicit Deck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .game.Card cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
      mutable_cards();
  private:
  const ::game::Card& _internal_cards(int index) const;
  ::game::Card* _internal_add_cards();
  public:
  const ::game::Card& cards(int index) const;
  ::game::Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:game.Deck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  virtual ~Player();
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 balance = 2;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.StartGameRequest) */ {
 public:
  inline StartGameRequest() : StartGameRequest(nullptr) {}
  virtual ~StartGameRequest();
  explicit constexpr StartGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGameRequest(const StartGameRequest& from);
  StartGameRequest(StartGameRequest&& from) noexcept
    : StartGameRequest() {
    *this = ::std::move(from);
  }

  inline StartGameRequest& operator=(const StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameRequest& operator=(StartGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const StartGameRequest*>(
               &_StartGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartGameRequest& a, StartGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGameRequest* New() const final {
    return CreateMaybeMessage<StartGameRequest>(nullptr);
  }

  StartGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartGameRequest& from);
  void MergeFrom(const StartGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.StartGameRequest";
  }
  protected:
  explicit StartGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.StartGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.StartGame) */ {
 public:
  inline StartGame() : StartGame(nullptr) {}
  virtual ~StartGame();
  explicit constexpr StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGame(const StartGame& from);
  StartGame(StartGame&& from) noexcept
    : StartGame() {
    *this = ::std::move(from);
  }

  inline StartGame& operator=(const StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGame& operator=(StartGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGame* internal_default_instance() {
    return reinterpret_cast<const StartGame*>(
               &_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StartGame& a, StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGame* New() const final {
    return CreateMaybeMessage<StartGame>(nullptr);
  }

  StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartGame& from);
  void MergeFrom(const StartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.StartGame";
  }
  protected:
  explicit StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDealerIdFieldNumber = 1,
    kBigBlindIdFieldNumber = 2,
    kSmallBlindIdFieldNumber = 3,
  };
  // uint32 dealer_id = 1;
  void clear_dealer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dealer_id() const;
  void set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dealer_id() const;
  void _internal_set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 big_blind_id = 2;
  void clear_big_blind_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 big_blind_id() const;
  void set_big_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_big_blind_id() const;
  void _internal_set_big_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 small_blind_id = 3;
  void clear_small_blind_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 small_blind_id() const;
  void set_small_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_small_blind_id() const;
  void _internal_set_small_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dealer_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 big_blind_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 small_blind_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DealCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DealCards) */ {
 public:
  inline DealCards() : DealCards(nullptr) {}
  virtual ~DealCards();
  explicit constexpr DealCards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DealCards(const DealCards& from);
  DealCards(DealCards&& from) noexcept
    : DealCards() {
    *this = ::std::move(from);
  }

  inline DealCards& operator=(const DealCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealCards& operator=(DealCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DealCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealCards* internal_default_instance() {
    return reinterpret_cast<const DealCards*>(
               &_DealCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DealCards& a, DealCards& b) {
    a.Swap(&b);
  }
  inline void Swap(DealCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DealCards* New() const final {
    return CreateMaybeMessage<DealCards>(nullptr);
  }

  DealCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DealCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DealCards& from);
  void MergeFrom(const DealCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DealCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DealCards";
  }
  protected:
  explicit DealCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .game.Card cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
      mutable_cards();
  private:
  const ::game::Card& _internal_cards(int index) const;
  ::game::Card* _internal_add_cards();
  public:
  const ::game::Card& cards(int index) const;
  ::game::Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:game.DealCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DealCommunityCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DealCommunityCards) */ {
 public:
  inline DealCommunityCards() : DealCommunityCards(nullptr) {}
  virtual ~DealCommunityCards();
  explicit constexpr DealCommunityCards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DealCommunityCards(const DealCommunityCards& from);
  DealCommunityCards(DealCommunityCards&& from) noexcept
    : DealCommunityCards() {
    *this = ::std::move(from);
  }

  inline DealCommunityCards& operator=(const DealCommunityCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealCommunityCards& operator=(DealCommunityCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DealCommunityCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealCommunityCards* internal_default_instance() {
    return reinterpret_cast<const DealCommunityCards*>(
               &_DealCommunityCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DealCommunityCards& a, DealCommunityCards& b) {
    a.Swap(&b);
  }
  inline void Swap(DealCommunityCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealCommunityCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DealCommunityCards* New() const final {
    return CreateMaybeMessage<DealCommunityCards>(nullptr);
  }

  DealCommunityCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DealCommunityCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DealCommunityCards& from);
  void MergeFrom(const DealCommunityCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DealCommunityCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DealCommunityCards";
  }
  protected:
  explicit DealCommunityCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .game.Card cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
      mutable_cards();
  private:
  const ::game::Card& _internal_cards(int index) const;
  ::game::Card* _internal_add_cards();
  public:
  const ::game::Card& cards(int index) const;
  ::game::Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
      cards() const;

  // @@protoc_insertion_point(class_scope:game.DealCommunityCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Result_EndPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Result.EndPlayer) */ {
 public:
  inline Result_EndPlayer() : Result_EndPlayer(nullptr) {}
  virtual ~Result_EndPlayer();
  explicit constexpr Result_EndPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result_EndPlayer(const Result_EndPlayer& from);
  Result_EndPlayer(Result_EndPlayer&& from) noexcept
    : Result_EndPlayer() {
    *this = ::std::move(from);
  }

  inline Result_EndPlayer& operator=(const Result_EndPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result_EndPlayer& operator=(Result_EndPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result_EndPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result_EndPlayer* internal_default_instance() {
    return reinterpret_cast<const Result_EndPlayer*>(
               &_Result_EndPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Result_EndPlayer& a, Result_EndPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(Result_EndPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result_EndPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result_EndPlayer* New() const final {
    return CreateMaybeMessage<Result_EndPlayer>(nullptr);
  }

  Result_EndPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result_EndPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result_EndPlayer& from);
  void MergeFrom(const Result_EndPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result_EndPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Result.EndPlayer";
  }
  protected:
  explicit Result_EndPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // repeated .game.Card cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::Card* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
      mutable_cards();
  private:
  const ::game::Card& _internal_cards(int index) const;
  ::game::Card* _internal_add_cards();
  public:
  const ::game::Card& cards(int index) const;
  ::game::Card* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
      cards() const;

  // .game.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::game::Player& player() const;
  ::game::Player* release_player();
  ::game::Player* mutable_player();
  void set_allocated_player(::game::Player* player);
  private:
  const ::game::Player& _internal_player() const;
  ::game::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::game::Player* player);
  ::game::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:game.Result.EndPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card > cards_;
  ::game::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Result_EndPlayer EndPlayer;

  // accessors -------------------------------------------------------

  enum : int {
    kEndPlayersFieldNumber = 1,
    kWinnerIdFieldNumber = 2,
    kPrizeFieldNumber = 3,
  };
  // repeated .game.Result.EndPlayer end_players = 1;
  int end_players_size() const;
  private:
  int _internal_end_players_size() const;
  public:
  void clear_end_players();
  ::game::Result_EndPlayer* mutable_end_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >*
      mutable_end_players();
  private:
  const ::game::Result_EndPlayer& _internal_end_players(int index) const;
  ::game::Result_EndPlayer* _internal_add_end_players();
  public:
  const ::game::Result_EndPlayer& end_players(int index) const;
  ::game::Result_EndPlayer* add_end_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >&
      end_players() const;

  // uint32 winner_id = 2;
  void clear_winner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id() const;
  void set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winner_id() const;
  void _internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prize = 3;
  void clear_prize();
  ::PROTOBUF_NAMESPACE_ID::uint32 prize() const;
  void set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prize() const;
  void _internal_set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer > end_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class BetTurn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.BetTurn) */ {
 public:
  inline BetTurn() : BetTurn(nullptr) {}
  virtual ~BetTurn();
  explicit constexpr BetTurn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BetTurn(const BetTurn& from);
  BetTurn(BetTurn&& from) noexcept
    : BetTurn() {
    *this = ::std::move(from);
  }

  inline BetTurn& operator=(const BetTurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline BetTurn& operator=(BetTurn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BetTurn& default_instance() {
    return *internal_default_instance();
  }
  static inline const BetTurn* internal_default_instance() {
    return reinterpret_cast<const BetTurn*>(
               &_BetTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BetTurn& a, BetTurn& b) {
    a.Swap(&b);
  }
  inline void Swap(BetTurn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BetTurn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BetTurn* New() const final {
    return CreateMaybeMessage<BetTurn>(nullptr);
  }

  BetTurn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BetTurn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BetTurn& from);
  void MergeFrom(const BetTurn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BetTurn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.BetTurn";
  }
  protected:
  explicit BetTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kAmountFieldNumber = 2,
    kBalanceFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 balance = 3;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.BetTurn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DoneBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DoneBet) */ {
 public:
  inline DoneBet() : DoneBet(nullptr) {}
  virtual ~DoneBet();
  explicit constexpr DoneBet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoneBet(const DoneBet& from);
  DoneBet(DoneBet&& from) noexcept
    : DoneBet() {
    *this = ::std::move(from);
  }

  inline DoneBet& operator=(const DoneBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoneBet& operator=(DoneBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoneBet& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoneBet* internal_default_instance() {
    return reinterpret_cast<const DoneBet*>(
               &_DoneBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DoneBet& a, DoneBet& b) {
    a.Swap(&b);
  }
  inline void Swap(DoneBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoneBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoneBet* New() const final {
    return CreateMaybeMessage<DoneBet>(nullptr);
  }

  DoneBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoneBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoneBet& from);
  void MergeFrom(const DoneBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoneBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DoneBet";
  }
  protected:
  explicit DoneBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kBetAmountFieldNumber = 2,
    kPlayerAmountFieldNumber = 3,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bet_amount = 2;
  void clear_bet_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_amount() const;
  void set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bet_amount() const;
  void _internal_set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_amount = 3;
  void clear_player_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_amount() const;
  void set_player_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_amount() const;
  void _internal_set_player_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.DoneBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EndRound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.EndRound) */ {
 public:
  inline EndRound() : EndRound(nullptr) {}
  virtual ~EndRound();
  explicit constexpr EndRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndRound(const EndRound& from);
  EndRound(EndRound&& from) noexcept
    : EndRound() {
    *this = ::std::move(from);
  }

  inline EndRound& operator=(const EndRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndRound& operator=(EndRound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndRound* internal_default_instance() {
    return reinterpret_cast<const EndRound*>(
               &_EndRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EndRound& a, EndRound& b) {
    a.Swap(&b);
  }
  inline void Swap(EndRound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndRound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndRound* New() const final {
    return CreateMaybeMessage<EndRound>(nullptr);
  }

  EndRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndRound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndRound& from);
  void MergeFrom(const EndRound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndRound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.EndRound";
  }
  protected:
  explicit EndRound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalAmountFieldNumber = 1,
  };
  // uint32 total_amount = 1;
  void clear_total_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_amount() const;
  void set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_amount() const;
  void _internal_set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.EndRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class ClientBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.ClientBet) */ {
 public:
  inline ClientBet() : ClientBet(nullptr) {}
  virtual ~ClientBet();
  explicit constexpr ClientBet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientBet(const ClientBet& from);
  ClientBet(ClientBet&& from) noexcept
    : ClientBet() {
    *this = ::std::move(from);
  }

  inline ClientBet& operator=(const ClientBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientBet& operator=(ClientBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientBet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientBet* internal_default_instance() {
    return reinterpret_cast<const ClientBet*>(
               &_ClientBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClientBet& a, ClientBet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientBet* New() const final {
    return CreateMaybeMessage<ClientBet>(nullptr);
  }

  ClientBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientBet& from);
  void MergeFrom(const ClientBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.ClientBet";
  }
  protected:
  explicit ClientBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecisionFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // uint32 decision = 1;
  void clear_decision();
  ::PROTOBUF_NAMESPACE_ID::uint32 decision() const;
  void set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decision() const;
  void _internal_set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.ClientBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Card

// uint32 num = 1;
inline void Card::clear_num() {
  num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::num() const {
  // @@protoc_insertion_point(field_get:game.Card.num)
  return _internal_num();
}
inline void Card::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ = value;
}
inline void Card::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:game.Card.num)
}

// uint32 suit = 2;
inline void Card::clear_suit() {
  suit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::_internal_suit() const {
  return suit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Card::suit() const {
  // @@protoc_insertion_point(field_get:game.Card.suit)
  return _internal_suit();
}
inline void Card::_internal_set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  suit_ = value;
}
inline void Card::set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suit(value);
  // @@protoc_insertion_point(field_set:game.Card.suit)
}

// -------------------------------------------------------------------

// Deck

// repeated .game.Card cards = 1;
inline int Deck::_internal_cards_size() const {
  return cards_.size();
}
inline int Deck::cards_size() const {
  return _internal_cards_size();
}
inline void Deck::clear_cards() {
  cards_.Clear();
}
inline ::game::Card* Deck::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.Deck.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
Deck::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.Deck.cards)
  return &cards_;
}
inline const ::game::Card& Deck::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::Card& Deck::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.Deck.cards)
  return _internal_cards(index);
}
inline ::game::Card* Deck::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::Card* Deck::add_cards() {
  // @@protoc_insertion_point(field_add:game.Deck.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
Deck::cards() const {
  // @@protoc_insertion_point(field_list:game.Deck.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Player

// uint32 id = 1;
inline void Player::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:game.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.Player.id)
}

// uint32 balance = 2;
inline void Player::clear_balance() {
  balance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::balance() const {
  // @@protoc_insertion_point(field_get:game.Player.balance)
  return _internal_balance();
}
inline void Player::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  balance_ = value;
}
inline void Player::set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:game.Player.balance)
}

// string name = 3;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:game.Player.name)
  return _internal_name();
}
inline void Player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:game.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:game.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Player::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:game.Player.name)
}
inline void Player::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.Player.name)
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:game.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.Player.name)
}

// -------------------------------------------------------------------

// StartGameRequest

// uint32 id = 1;
inline void StartGameRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameRequest::id() const {
  // @@protoc_insertion_point(field_get:game.StartGameRequest.id)
  return _internal_id();
}
inline void StartGameRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StartGameRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.StartGameRequest.id)
}

// -------------------------------------------------------------------

// StartGame

// uint32 dealer_id = 1;
inline void StartGame::clear_dealer_id() {
  dealer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::_internal_dealer_id() const {
  return dealer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::dealer_id() const {
  // @@protoc_insertion_point(field_get:game.StartGame.dealer_id)
  return _internal_dealer_id();
}
inline void StartGame::_internal_set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dealer_id_ = value;
}
inline void StartGame::set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dealer_id(value);
  // @@protoc_insertion_point(field_set:game.StartGame.dealer_id)
}

// uint32 big_blind_id = 2;
inline void StartGame::clear_big_blind_id() {
  big_blind_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::_internal_big_blind_id() const {
  return big_blind_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::big_blind_id() const {
  // @@protoc_insertion_point(field_get:game.StartGame.big_blind_id)
  return _internal_big_blind_id();
}
inline void StartGame::_internal_set_big_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  big_blind_id_ = value;
}
inline void StartGame::set_big_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_big_blind_id(value);
  // @@protoc_insertion_point(field_set:game.StartGame.big_blind_id)
}

// uint32 small_blind_id = 3;
inline void StartGame::clear_small_blind_id() {
  small_blind_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::_internal_small_blind_id() const {
  return small_blind_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGame::small_blind_id() const {
  // @@protoc_insertion_point(field_get:game.StartGame.small_blind_id)
  return _internal_small_blind_id();
}
inline void StartGame::_internal_set_small_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  small_blind_id_ = value;
}
inline void StartGame::set_small_blind_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_small_blind_id(value);
  // @@protoc_insertion_point(field_set:game.StartGame.small_blind_id)
}

// -------------------------------------------------------------------

// DealCards

// repeated .game.Card cards = 1;
inline int DealCards::_internal_cards_size() const {
  return cards_.size();
}
inline int DealCards::cards_size() const {
  return _internal_cards_size();
}
inline void DealCards::clear_cards() {
  cards_.Clear();
}
inline ::game::Card* DealCards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.DealCards.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
DealCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.DealCards.cards)
  return &cards_;
}
inline const ::game::Card& DealCards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::Card& DealCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.DealCards.cards)
  return _internal_cards(index);
}
inline ::game::Card* DealCards::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::Card* DealCards::add_cards() {
  // @@protoc_insertion_point(field_add:game.DealCards.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
DealCards::cards() const {
  // @@protoc_insertion_point(field_list:game.DealCards.cards)
  return cards_;
}

// -------------------------------------------------------------------

// DealCommunityCards

// repeated .game.Card cards = 1;
inline int DealCommunityCards::_internal_cards_size() const {
  return cards_.size();
}
inline int DealCommunityCards::cards_size() const {
  return _internal_cards_size();
}
inline void DealCommunityCards::clear_cards() {
  cards_.Clear();
}
inline ::game::Card* DealCommunityCards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.DealCommunityCards.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
DealCommunityCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.DealCommunityCards.cards)
  return &cards_;
}
inline const ::game::Card& DealCommunityCards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::Card& DealCommunityCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.DealCommunityCards.cards)
  return _internal_cards(index);
}
inline ::game::Card* DealCommunityCards::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::Card* DealCommunityCards::add_cards() {
  // @@protoc_insertion_point(field_add:game.DealCommunityCards.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
DealCommunityCards::cards() const {
  // @@protoc_insertion_point(field_list:game.DealCommunityCards.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Result_EndPlayer

// .game.Player player = 1;
inline bool Result_EndPlayer::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool Result_EndPlayer::has_player() const {
  return _internal_has_player();
}
inline void Result_EndPlayer::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::game::Player& Result_EndPlayer::_internal_player() const {
  const ::game::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Player&>(
      ::game::_Player_default_instance_);
}
inline const ::game::Player& Result_EndPlayer::player() const {
  // @@protoc_insertion_point(field_get:game.Result.EndPlayer.player)
  return _internal_player();
}
inline void Result_EndPlayer::unsafe_arena_set_allocated_player(
    ::game::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.Result.EndPlayer.player)
}
inline ::game::Player* Result_EndPlayer::release_player() {
  
  ::game::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::game::Player* Result_EndPlayer::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:game.Result.EndPlayer.player)
  
  ::game::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::game::Player* Result_EndPlayer::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::game::Player* Result_EndPlayer::mutable_player() {
  // @@protoc_insertion_point(field_mutable:game.Result.EndPlayer.player)
  return _internal_mutable_player();
}
inline void Result_EndPlayer::set_allocated_player(::game::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:game.Result.EndPlayer.player)
}

// repeated .game.Card cards = 2;
inline int Result_EndPlayer::_internal_cards_size() const {
  return cards_.size();
}
inline int Result_EndPlayer::cards_size() const {
  return _internal_cards_size();
}
inline void Result_EndPlayer::clear_cards() {
  cards_.Clear();
}
inline ::game::Card* Result_EndPlayer::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.Result.EndPlayer.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >*
Result_EndPlayer::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.Result.EndPlayer.cards)
  return &cards_;
}
inline const ::game::Card& Result_EndPlayer::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::Card& Result_EndPlayer::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.Result.EndPlayer.cards)
  return _internal_cards(index);
}
inline ::game::Card* Result_EndPlayer::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::Card* Result_EndPlayer::add_cards() {
  // @@protoc_insertion_point(field_add:game.Result.EndPlayer.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Card >&
Result_EndPlayer::cards() const {
  // @@protoc_insertion_point(field_list:game.Result.EndPlayer.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Result

// repeated .game.Result.EndPlayer end_players = 1;
inline int Result::_internal_end_players_size() const {
  return end_players_.size();
}
inline int Result::end_players_size() const {
  return _internal_end_players_size();
}
inline void Result::clear_end_players() {
  end_players_.Clear();
}
inline ::game::Result_EndPlayer* Result::mutable_end_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.Result.end_players)
  return end_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >*
Result::mutable_end_players() {
  // @@protoc_insertion_point(field_mutable_list:game.Result.end_players)
  return &end_players_;
}
inline const ::game::Result_EndPlayer& Result::_internal_end_players(int index) const {
  return end_players_.Get(index);
}
inline const ::game::Result_EndPlayer& Result::end_players(int index) const {
  // @@protoc_insertion_point(field_get:game.Result.end_players)
  return _internal_end_players(index);
}
inline ::game::Result_EndPlayer* Result::_internal_add_end_players() {
  return end_players_.Add();
}
inline ::game::Result_EndPlayer* Result::add_end_players() {
  // @@protoc_insertion_point(field_add:game.Result.end_players)
  return _internal_add_end_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >&
Result::end_players() const {
  // @@protoc_insertion_point(field_list:game.Result.end_players)
  return end_players_;
}

// uint32 winner_id = 2;
inline void Result::clear_winner_id() {
  winner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::_internal_winner_id() const {
  return winner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::winner_id() const {
  // @@protoc_insertion_point(field_get:game.Result.winner_id)
  return _internal_winner_id();
}
inline void Result::_internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  winner_id_ = value;
}
inline void Result::set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winner_id(value);
  // @@protoc_insertion_point(field_set:game.Result.winner_id)
}

// uint32 prize = 3;
inline void Result::clear_prize() {
  prize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::_internal_prize() const {
  return prize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::prize() const {
  // @@protoc_insertion_point(field_get:game.Result.prize)
  return _internal_prize();
}
inline void Result::_internal_set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prize_ = value;
}
inline void Result::set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prize(value);
  // @@protoc_insertion_point(field_set:game.Result.prize)
}

// -------------------------------------------------------------------

// BetTurn

// uint32 player_id = 1;
inline void BetTurn::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::player_id() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.player_id)
  return _internal_player_id();
}
inline void BetTurn::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void BetTurn::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.player_id)
}

// uint32 amount = 2;
inline void BetTurn::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::amount() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.amount)
  return _internal_amount();
}
inline void BetTurn::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void BetTurn::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.amount)
}

// uint32 balance = 3;
inline void BetTurn::clear_balance() {
  balance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::balance() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.balance)
  return _internal_balance();
}
inline void BetTurn::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  balance_ = value;
}
inline void BetTurn::set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.balance)
}

// uint32 state = 4;
inline void BetTurn::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::state() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.state)
  return _internal_state();
}
inline void BetTurn::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void BetTurn::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.state)
}

// -------------------------------------------------------------------

// DoneBet

// uint32 player_id = 1;
inline void DoneBet::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::player_id() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.player_id)
  return _internal_player_id();
}
inline void DoneBet::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void DoneBet::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.player_id)
}

// uint32 bet_amount = 2;
inline void DoneBet::clear_bet_amount() {
  bet_amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_bet_amount() const {
  return bet_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::bet_amount() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.bet_amount)
  return _internal_bet_amount();
}
inline void DoneBet::_internal_set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bet_amount_ = value;
}
inline void DoneBet::set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bet_amount(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.bet_amount)
}

// uint32 player_amount = 3;
inline void DoneBet::clear_player_amount() {
  player_amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_player_amount() const {
  return player_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::player_amount() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.player_amount)
  return _internal_player_amount();
}
inline void DoneBet::_internal_set_player_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_amount_ = value;
}
inline void DoneBet::set_player_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_amount(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.player_amount)
}

// -------------------------------------------------------------------

// EndRound

// uint32 total_amount = 1;
inline void EndRound::clear_total_amount() {
  total_amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndRound::_internal_total_amount() const {
  return total_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndRound::total_amount() const {
  // @@protoc_insertion_point(field_get:game.EndRound.total_amount)
  return _internal_total_amount();
}
inline void EndRound::_internal_set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_amount_ = value;
}
inline void EndRound::set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_amount(value);
  // @@protoc_insertion_point(field_set:game.EndRound.total_amount)
}

// -------------------------------------------------------------------

// ClientBet

// uint32 decision = 1;
inline void ClientBet::clear_decision() {
  decision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientBet::_internal_decision() const {
  return decision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientBet::decision() const {
  // @@protoc_insertion_point(field_get:game.ClientBet.decision)
  return _internal_decision();
}
inline void ClientBet::_internal_set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  decision_ = value;
}
inline void ClientBet::set_decision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:game.ClientBet.decision)
}

// uint32 amount = 2;
inline void ClientBet::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientBet::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientBet::amount() const {
  // @@protoc_insertion_point(field_get:game.ClientBet.amount)
  return _internal_amount();
}
inline void ClientBet::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void ClientBet::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:game.ClientBet.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
