// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_game_2eproto_metadata_getter(int index);
namespace game {
class BetTurn;
struct BetTurnDefaultTypeInternal;
extern BetTurnDefaultTypeInternal _BetTurn_default_instance_;
class BetTurnResponse;
struct BetTurnResponseDefaultTypeInternal;
extern BetTurnResponseDefaultTypeInternal _BetTurnResponse_default_instance_;
class DealCards;
struct DealCardsDefaultTypeInternal;
extern DealCardsDefaultTypeInternal _DealCards_default_instance_;
class DealCommunityCards;
struct DealCommunityCardsDefaultTypeInternal;
extern DealCommunityCardsDefaultTypeInternal _DealCommunityCards_default_instance_;
class DoneBet;
struct DoneBetDefaultTypeInternal;
extern DoneBetDefaultTypeInternal _DoneBet_default_instance_;
class EndRound;
struct EndRoundDefaultTypeInternal;
extern EndRoundDefaultTypeInternal _EndRound_default_instance_;
class ProtoCard;
struct ProtoCardDefaultTypeInternal;
extern ProtoCardDefaultTypeInternal _ProtoCard_default_instance_;
class ProtoPlayer;
struct ProtoPlayerDefaultTypeInternal;
extern ProtoPlayerDefaultTypeInternal _ProtoPlayer_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Result_EndPlayer;
struct Result_EndPlayerDefaultTypeInternal;
extern Result_EndPlayerDefaultTypeInternal _Result_EndPlayer_default_instance_;
class StartGameRequest;
struct StartGameRequestDefaultTypeInternal;
extern StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;
class StartGameResponse;
struct StartGameResponseDefaultTypeInternal;
extern StartGameResponseDefaultTypeInternal _StartGameResponse_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::BetTurn* Arena::CreateMaybeMessage<::game::BetTurn>(Arena*);
template<> ::game::BetTurnResponse* Arena::CreateMaybeMessage<::game::BetTurnResponse>(Arena*);
template<> ::game::DealCards* Arena::CreateMaybeMessage<::game::DealCards>(Arena*);
template<> ::game::DealCommunityCards* Arena::CreateMaybeMessage<::game::DealCommunityCards>(Arena*);
template<> ::game::DoneBet* Arena::CreateMaybeMessage<::game::DoneBet>(Arena*);
template<> ::game::EndRound* Arena::CreateMaybeMessage<::game::EndRound>(Arena*);
template<> ::game::ProtoCard* Arena::CreateMaybeMessage<::game::ProtoCard>(Arena*);
template<> ::game::ProtoPlayer* Arena::CreateMaybeMessage<::game::ProtoPlayer>(Arena*);
template<> ::game::Result* Arena::CreateMaybeMessage<::game::Result>(Arena*);
template<> ::game::Result_EndPlayer* Arena::CreateMaybeMessage<::game::Result_EndPlayer>(Arena*);
template<> ::game::StartGameRequest* Arena::CreateMaybeMessage<::game::StartGameRequest>(Arena*);
template<> ::game::StartGameResponse* Arena::CreateMaybeMessage<::game::StartGameResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class ProtoCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.ProtoCard) */ {
 public:
  inline ProtoCard() : ProtoCard(nullptr) {}
  virtual ~ProtoCard();
  explicit constexpr ProtoCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoCard(const ProtoCard& from);
  ProtoCard(ProtoCard&& from) noexcept
    : ProtoCard() {
    *this = ::std::move(from);
  }

  inline ProtoCard& operator=(const ProtoCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoCard& operator=(ProtoCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoCard* internal_default_instance() {
    return reinterpret_cast<const ProtoCard*>(
               &_ProtoCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoCard& a, ProtoCard& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoCard* New() const final {
    return CreateMaybeMessage<ProtoCard>(nullptr);
  }

  ProtoCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoCard& from);
  void MergeFrom(const ProtoCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.ProtoCard";
  }
  protected:
  explicit ProtoCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kSuitFieldNumber = 2,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 suit = 2;
  void clear_suit();
  ::PROTOBUF_NAMESPACE_ID::uint32 suit() const;
  void set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suit() const;
  void _internal_set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.ProtoCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class ProtoPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.ProtoPlayer) */ {
 public:
  inline ProtoPlayer() : ProtoPlayer(nullptr) {}
  virtual ~ProtoPlayer();
  explicit constexpr ProtoPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoPlayer(const ProtoPlayer& from);
  ProtoPlayer(ProtoPlayer&& from) noexcept
    : ProtoPlayer() {
    *this = ::std::move(from);
  }

  inline ProtoPlayer& operator=(const ProtoPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoPlayer& operator=(ProtoPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoPlayer* internal_default_instance() {
    return reinterpret_cast<const ProtoPlayer*>(
               &_ProtoPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoPlayer& a, ProtoPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoPlayer* New() const final {
    return CreateMaybeMessage<ProtoPlayer>(nullptr);
  }

  ProtoPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoPlayer& from);
  void MergeFrom(const ProtoPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.ProtoPlayer";
  }
  protected:
  explicit ProtoPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBalanceFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 balance = 2;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.ProtoPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 balance_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.StartGameRequest) */ {
 public:
  inline StartGameRequest() : StartGameRequest(nullptr) {}
  virtual ~StartGameRequest();
  explicit constexpr StartGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGameRequest(const StartGameRequest& from);
  StartGameRequest(StartGameRequest&& from) noexcept
    : StartGameRequest() {
    *this = ::std::move(from);
  }

  inline StartGameRequest& operator=(const StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameRequest& operator=(StartGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const StartGameRequest*>(
               &_StartGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartGameRequest& a, StartGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGameRequest* New() const final {
    return CreateMaybeMessage<StartGameRequest>(nullptr);
  }

  StartGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartGameRequest& from);
  void MergeFrom(const StartGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.StartGameRequest";
  }
  protected:
  explicit StartGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.StartGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.StartGameResponse) */ {
 public:
  inline StartGameResponse() : StartGameResponse(nullptr) {}
  virtual ~StartGameResponse();
  explicit constexpr StartGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGameResponse(const StartGameResponse& from);
  StartGameResponse(StartGameResponse&& from) noexcept
    : StartGameResponse() {
    *this = ::std::move(from);
  }

  inline StartGameResponse& operator=(const StartGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameResponse& operator=(StartGameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGameResponse* internal_default_instance() {
    return reinterpret_cast<const StartGameResponse*>(
               &_StartGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartGameResponse& a, StartGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGameResponse* New() const final {
    return CreateMaybeMessage<StartGameResponse>(nullptr);
  }

  StartGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartGameResponse& from);
  void MergeFrom(const StartGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.StartGameResponse";
  }
  protected:
  explicit StartGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kDealerIdFieldNumber = 1,
  };
  // repeated .game.ProtoPlayer players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::ProtoPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoPlayer >*
      mutable_players();
  private:
  const ::game::ProtoPlayer& _internal_players(int index) const;
  ::game::ProtoPlayer* _internal_add_players();
  public:
  const ::game::ProtoPlayer& players(int index) const;
  ::game::ProtoPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoPlayer >&
      players() const;

  // uint32 dealer_id = 1;
  void clear_dealer_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dealer_id() const;
  void set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dealer_id() const;
  void _internal_set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.StartGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoPlayer > players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dealer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DealCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DealCards) */ {
 public:
  inline DealCards() : DealCards(nullptr) {}
  virtual ~DealCards();
  explicit constexpr DealCards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DealCards(const DealCards& from);
  DealCards(DealCards&& from) noexcept
    : DealCards() {
    *this = ::std::move(from);
  }

  inline DealCards& operator=(const DealCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealCards& operator=(DealCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DealCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealCards* internal_default_instance() {
    return reinterpret_cast<const DealCards*>(
               &_DealCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DealCards& a, DealCards& b) {
    a.Swap(&b);
  }
  inline void Swap(DealCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DealCards* New() const final {
    return CreateMaybeMessage<DealCards>(nullptr);
  }

  DealCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DealCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DealCards& from);
  void MergeFrom(const DealCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DealCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DealCards";
  }
  protected:
  explicit DealCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 1,
  };
  // repeated .game.ProtoCard cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::ProtoCard* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
      mutable_cards();
  private:
  const ::game::ProtoCard& _internal_cards(int index) const;
  ::game::ProtoCard* _internal_add_cards();
  public:
  const ::game::ProtoCard& cards(int index) const;
  ::game::ProtoCard* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
      cards() const;

  // @@protoc_insertion_point(class_scope:game.DealCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard > cards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DealCommunityCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DealCommunityCards) */ {
 public:
  inline DealCommunityCards() : DealCommunityCards(nullptr) {}
  virtual ~DealCommunityCards();
  explicit constexpr DealCommunityCards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DealCommunityCards(const DealCommunityCards& from);
  DealCommunityCards(DealCommunityCards&& from) noexcept
    : DealCommunityCards() {
    *this = ::std::move(from);
  }

  inline DealCommunityCards& operator=(const DealCommunityCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline DealCommunityCards& operator=(DealCommunityCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DealCommunityCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const DealCommunityCards* internal_default_instance() {
    return reinterpret_cast<const DealCommunityCards*>(
               &_DealCommunityCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DealCommunityCards& a, DealCommunityCards& b) {
    a.Swap(&b);
  }
  inline void Swap(DealCommunityCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DealCommunityCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DealCommunityCards* New() const final {
    return CreateMaybeMessage<DealCommunityCards>(nullptr);
  }

  DealCommunityCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DealCommunityCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DealCommunityCards& from);
  void MergeFrom(const DealCommunityCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DealCommunityCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DealCommunityCards";
  }
  protected:
  explicit DealCommunityCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kPhaseFieldNumber = 1,
  };
  // repeated .game.ProtoCard cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::ProtoCard* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
      mutable_cards();
  private:
  const ::game::ProtoCard& _internal_cards(int index) const;
  ::game::ProtoCard* _internal_add_cards();
  public:
  const ::game::ProtoCard& cards(int index) const;
  ::game::ProtoCard* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
      cards() const;

  // uint32 phase = 1;
  void clear_phase();
  ::PROTOBUF_NAMESPACE_ID::uint32 phase() const;
  void set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phase() const;
  void _internal_set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.DealCommunityCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard > cards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Result_EndPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Result.EndPlayer) */ {
 public:
  inline Result_EndPlayer() : Result_EndPlayer(nullptr) {}
  virtual ~Result_EndPlayer();
  explicit constexpr Result_EndPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result_EndPlayer(const Result_EndPlayer& from);
  Result_EndPlayer(Result_EndPlayer&& from) noexcept
    : Result_EndPlayer() {
    *this = ::std::move(from);
  }

  inline Result_EndPlayer& operator=(const Result_EndPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result_EndPlayer& operator=(Result_EndPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result_EndPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result_EndPlayer* internal_default_instance() {
    return reinterpret_cast<const Result_EndPlayer*>(
               &_Result_EndPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Result_EndPlayer& a, Result_EndPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(Result_EndPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result_EndPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result_EndPlayer* New() const final {
    return CreateMaybeMessage<Result_EndPlayer>(nullptr);
  }

  Result_EndPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result_EndPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result_EndPlayer& from);
  void MergeFrom(const Result_EndPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result_EndPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Result.EndPlayer";
  }
  protected:
  explicit Result_EndPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // repeated .game.ProtoCard cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  ::game::ProtoCard* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
      mutable_cards();
  private:
  const ::game::ProtoCard& _internal_cards(int index) const;
  ::game::ProtoCard* _internal_add_cards();
  public:
  const ::game::ProtoCard& cards(int index) const;
  ::game::ProtoCard* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
      cards() const;

  // .game.ProtoPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::game::ProtoPlayer& player() const;
  ::game::ProtoPlayer* release_player();
  ::game::ProtoPlayer* mutable_player();
  void set_allocated_player(::game::ProtoPlayer* player);
  private:
  const ::game::ProtoPlayer& _internal_player() const;
  ::game::ProtoPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::game::ProtoPlayer* player);
  ::game::ProtoPlayer* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:game.Result.EndPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard > cards_;
  ::game::ProtoPlayer* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Result_EndPlayer EndPlayer;

  // accessors -------------------------------------------------------

  enum : int {
    kEndPlayersFieldNumber = 1,
    kWinnerIdFieldNumber = 2,
    kPrizeFieldNumber = 3,
  };
  // repeated .game.Result.EndPlayer end_players = 1;
  int end_players_size() const;
  private:
  int _internal_end_players_size() const;
  public:
  void clear_end_players();
  ::game::Result_EndPlayer* mutable_end_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >*
      mutable_end_players();
  private:
  const ::game::Result_EndPlayer& _internal_end_players(int index) const;
  ::game::Result_EndPlayer* _internal_add_end_players();
  public:
  const ::game::Result_EndPlayer& end_players(int index) const;
  ::game::Result_EndPlayer* add_end_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >&
      end_players() const;

  // uint32 winner_id = 2;
  void clear_winner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id() const;
  void set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winner_id() const;
  void _internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prize = 3;
  void clear_prize();
  ::PROTOBUF_NAMESPACE_ID::uint32 prize() const;
  void set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prize() const;
  void _internal_set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer > end_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class BetTurn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.BetTurn) */ {
 public:
  inline BetTurn() : BetTurn(nullptr) {}
  virtual ~BetTurn();
  explicit constexpr BetTurn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BetTurn(const BetTurn& from);
  BetTurn(BetTurn&& from) noexcept
    : BetTurn() {
    *this = ::std::move(from);
  }

  inline BetTurn& operator=(const BetTurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline BetTurn& operator=(BetTurn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BetTurn& default_instance() {
    return *internal_default_instance();
  }
  static inline const BetTurn* internal_default_instance() {
    return reinterpret_cast<const BetTurn*>(
               &_BetTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BetTurn& a, BetTurn& b) {
    a.Swap(&b);
  }
  inline void Swap(BetTurn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BetTurn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BetTurn* New() const final {
    return CreateMaybeMessage<BetTurn>(nullptr);
  }

  BetTurn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BetTurn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BetTurn& from);
  void MergeFrom(const BetTurn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BetTurn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.BetTurn";
  }
  protected:
  explicit BetTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCurrentPoolFieldNumber = 2,
    kAmountFieldNumber = 3,
    kBalanceFieldNumber = 4,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 current_pool = 2;
  void clear_current_pool();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_pool() const;
  void set_current_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_pool() const;
  void _internal_set_current_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 balance = 4;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.BetTurn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class BetTurnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.BetTurnResponse) */ {
 public:
  inline BetTurnResponse() : BetTurnResponse(nullptr) {}
  virtual ~BetTurnResponse();
  explicit constexpr BetTurnResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BetTurnResponse(const BetTurnResponse& from);
  BetTurnResponse(BetTurnResponse&& from) noexcept
    : BetTurnResponse() {
    *this = ::std::move(from);
  }

  inline BetTurnResponse& operator=(const BetTurnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BetTurnResponse& operator=(BetTurnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BetTurnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BetTurnResponse* internal_default_instance() {
    return reinterpret_cast<const BetTurnResponse*>(
               &_BetTurnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BetTurnResponse& a, BetTurnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BetTurnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BetTurnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BetTurnResponse* New() const final {
    return CreateMaybeMessage<BetTurnResponse>(nullptr);
  }

  BetTurnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BetTurnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BetTurnResponse& from);
  void MergeFrom(const BetTurnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BetTurnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.BetTurnResponse";
  }
  protected:
  explicit BetTurnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kActionFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 action = 2;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.BetTurnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class DoneBet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.DoneBet) */ {
 public:
  inline DoneBet() : DoneBet(nullptr) {}
  virtual ~DoneBet();
  explicit constexpr DoneBet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoneBet(const DoneBet& from);
  DoneBet(DoneBet&& from) noexcept
    : DoneBet() {
    *this = ::std::move(from);
  }

  inline DoneBet& operator=(const DoneBet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoneBet& operator=(DoneBet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoneBet& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoneBet* internal_default_instance() {
    return reinterpret_cast<const DoneBet*>(
               &_DoneBet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DoneBet& a, DoneBet& b) {
    a.Swap(&b);
  }
  inline void Swap(DoneBet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoneBet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoneBet* New() const final {
    return CreateMaybeMessage<DoneBet>(nullptr);
  }

  DoneBet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoneBet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoneBet& from);
  void MergeFrom(const DoneBet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoneBet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.DoneBet";
  }
  protected:
  explicit DoneBet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kBetAmountFieldNumber = 2,
    kPlayerBalanceFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bet_amount = 2;
  void clear_bet_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_amount() const;
  void set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bet_amount() const;
  void _internal_set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_balance = 3;
  void clear_player_balance();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_balance() const;
  void set_player_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_balance() const;
  void _internal_set_player_balance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 action = 4;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.DoneBet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EndRound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.EndRound) */ {
 public:
  inline EndRound() : EndRound(nullptr) {}
  virtual ~EndRound();
  explicit constexpr EndRound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndRound(const EndRound& from);
  EndRound(EndRound&& from) noexcept
    : EndRound() {
    *this = ::std::move(from);
  }

  inline EndRound& operator=(const EndRound& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndRound& operator=(EndRound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndRound& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndRound* internal_default_instance() {
    return reinterpret_cast<const EndRound*>(
               &_EndRound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EndRound& a, EndRound& b) {
    a.Swap(&b);
  }
  inline void Swap(EndRound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndRound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndRound* New() const final {
    return CreateMaybeMessage<EndRound>(nullptr);
  }

  EndRound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndRound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndRound& from);
  void MergeFrom(const EndRound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndRound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.EndRound";
  }
  protected:
  explicit EndRound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalAmountFieldNumber = 1,
  };
  // uint32 total_amount = 1;
  void clear_total_amount();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_amount() const;
  void set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_amount() const;
  void _internal_set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.EndRound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoCard

// uint32 value = 1;
inline void ProtoCard::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoCard::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoCard::value() const {
  // @@protoc_insertion_point(field_get:game.ProtoCard.value)
  return _internal_value();
}
inline void ProtoCard::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void ProtoCard::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:game.ProtoCard.value)
}

// uint32 suit = 2;
inline void ProtoCard::clear_suit() {
  suit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoCard::_internal_suit() const {
  return suit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoCard::suit() const {
  // @@protoc_insertion_point(field_get:game.ProtoCard.suit)
  return _internal_suit();
}
inline void ProtoCard::_internal_set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  suit_ = value;
}
inline void ProtoCard::set_suit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suit(value);
  // @@protoc_insertion_point(field_set:game.ProtoCard.suit)
}

// -------------------------------------------------------------------

// ProtoPlayer

// uint32 id = 1;
inline void ProtoPlayer::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoPlayer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoPlayer::id() const {
  // @@protoc_insertion_point(field_get:game.ProtoPlayer.id)
  return _internal_id();
}
inline void ProtoPlayer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ProtoPlayer::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.ProtoPlayer.id)
}

// uint32 balance = 2;
inline void ProtoPlayer::clear_balance() {
  balance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoPlayer::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtoPlayer::balance() const {
  // @@protoc_insertion_point(field_get:game.ProtoPlayer.balance)
  return _internal_balance();
}
inline void ProtoPlayer::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  balance_ = value;
}
inline void ProtoPlayer::set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:game.ProtoPlayer.balance)
}

// int32 status = 3;
inline void ProtoPlayer::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoPlayer::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoPlayer::status() const {
  // @@protoc_insertion_point(field_get:game.ProtoPlayer.status)
  return _internal_status();
}
inline void ProtoPlayer::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ProtoPlayer::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.ProtoPlayer.status)
}

// -------------------------------------------------------------------

// StartGameRequest

// uint32 id = 1;
inline void StartGameRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameRequest::id() const {
  // @@protoc_insertion_point(field_get:game.StartGameRequest.id)
  return _internal_id();
}
inline void StartGameRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StartGameRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game.StartGameRequest.id)
}

// -------------------------------------------------------------------

// StartGameResponse

// uint32 dealer_id = 1;
inline void StartGameResponse::clear_dealer_id() {
  dealer_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameResponse::_internal_dealer_id() const {
  return dealer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartGameResponse::dealer_id() const {
  // @@protoc_insertion_point(field_get:game.StartGameResponse.dealer_id)
  return _internal_dealer_id();
}
inline void StartGameResponse::_internal_set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dealer_id_ = value;
}
inline void StartGameResponse::set_dealer_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dealer_id(value);
  // @@protoc_insertion_point(field_set:game.StartGameResponse.dealer_id)
}

// repeated .game.ProtoPlayer players = 2;
inline int StartGameResponse::_internal_players_size() const {
  return players_.size();
}
inline int StartGameResponse::players_size() const {
  return _internal_players_size();
}
inline void StartGameResponse::clear_players() {
  players_.Clear();
}
inline ::game::ProtoPlayer* StartGameResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.StartGameResponse.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoPlayer >*
StartGameResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.StartGameResponse.players)
  return &players_;
}
inline const ::game::ProtoPlayer& StartGameResponse::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::game::ProtoPlayer& StartGameResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:game.StartGameResponse.players)
  return _internal_players(index);
}
inline ::game::ProtoPlayer* StartGameResponse::_internal_add_players() {
  return players_.Add();
}
inline ::game::ProtoPlayer* StartGameResponse::add_players() {
  // @@protoc_insertion_point(field_add:game.StartGameResponse.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoPlayer >&
StartGameResponse::players() const {
  // @@protoc_insertion_point(field_list:game.StartGameResponse.players)
  return players_;
}

// -------------------------------------------------------------------

// DealCards

// repeated .game.ProtoCard cards = 1;
inline int DealCards::_internal_cards_size() const {
  return cards_.size();
}
inline int DealCards::cards_size() const {
  return _internal_cards_size();
}
inline void DealCards::clear_cards() {
  cards_.Clear();
}
inline ::game::ProtoCard* DealCards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.DealCards.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
DealCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.DealCards.cards)
  return &cards_;
}
inline const ::game::ProtoCard& DealCards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::ProtoCard& DealCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.DealCards.cards)
  return _internal_cards(index);
}
inline ::game::ProtoCard* DealCards::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::ProtoCard* DealCards::add_cards() {
  // @@protoc_insertion_point(field_add:game.DealCards.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
DealCards::cards() const {
  // @@protoc_insertion_point(field_list:game.DealCards.cards)
  return cards_;
}

// -------------------------------------------------------------------

// DealCommunityCards

// uint32 phase = 1;
inline void DealCommunityCards::clear_phase() {
  phase_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DealCommunityCards::_internal_phase() const {
  return phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DealCommunityCards::phase() const {
  // @@protoc_insertion_point(field_get:game.DealCommunityCards.phase)
  return _internal_phase();
}
inline void DealCommunityCards::_internal_set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phase_ = value;
}
inline void DealCommunityCards::set_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:game.DealCommunityCards.phase)
}

// repeated .game.ProtoCard cards = 2;
inline int DealCommunityCards::_internal_cards_size() const {
  return cards_.size();
}
inline int DealCommunityCards::cards_size() const {
  return _internal_cards_size();
}
inline void DealCommunityCards::clear_cards() {
  cards_.Clear();
}
inline ::game::ProtoCard* DealCommunityCards::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.DealCommunityCards.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
DealCommunityCards::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.DealCommunityCards.cards)
  return &cards_;
}
inline const ::game::ProtoCard& DealCommunityCards::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::ProtoCard& DealCommunityCards::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.DealCommunityCards.cards)
  return _internal_cards(index);
}
inline ::game::ProtoCard* DealCommunityCards::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::ProtoCard* DealCommunityCards::add_cards() {
  // @@protoc_insertion_point(field_add:game.DealCommunityCards.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
DealCommunityCards::cards() const {
  // @@protoc_insertion_point(field_list:game.DealCommunityCards.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Result_EndPlayer

// .game.ProtoPlayer player = 1;
inline bool Result_EndPlayer::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool Result_EndPlayer::has_player() const {
  return _internal_has_player();
}
inline void Result_EndPlayer::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::game::ProtoPlayer& Result_EndPlayer::_internal_player() const {
  const ::game::ProtoPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::ProtoPlayer&>(
      ::game::_ProtoPlayer_default_instance_);
}
inline const ::game::ProtoPlayer& Result_EndPlayer::player() const {
  // @@protoc_insertion_point(field_get:game.Result.EndPlayer.player)
  return _internal_player();
}
inline void Result_EndPlayer::unsafe_arena_set_allocated_player(
    ::game::ProtoPlayer* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.Result.EndPlayer.player)
}
inline ::game::ProtoPlayer* Result_EndPlayer::release_player() {
  
  ::game::ProtoPlayer* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::game::ProtoPlayer* Result_EndPlayer::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:game.Result.EndPlayer.player)
  
  ::game::ProtoPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::game::ProtoPlayer* Result_EndPlayer::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::ProtoPlayer>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::game::ProtoPlayer* Result_EndPlayer::mutable_player() {
  // @@protoc_insertion_point(field_mutable:game.Result.EndPlayer.player)
  return _internal_mutable_player();
}
inline void Result_EndPlayer::set_allocated_player(::game::ProtoPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:game.Result.EndPlayer.player)
}

// repeated .game.ProtoCard cards = 2;
inline int Result_EndPlayer::_internal_cards_size() const {
  return cards_.size();
}
inline int Result_EndPlayer::cards_size() const {
  return _internal_cards_size();
}
inline void Result_EndPlayer::clear_cards() {
  cards_.Clear();
}
inline ::game::ProtoCard* Result_EndPlayer::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:game.Result.EndPlayer.cards)
  return cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >*
Result_EndPlayer::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game.Result.EndPlayer.cards)
  return &cards_;
}
inline const ::game::ProtoCard& Result_EndPlayer::_internal_cards(int index) const {
  return cards_.Get(index);
}
inline const ::game::ProtoCard& Result_EndPlayer::cards(int index) const {
  // @@protoc_insertion_point(field_get:game.Result.EndPlayer.cards)
  return _internal_cards(index);
}
inline ::game::ProtoCard* Result_EndPlayer::_internal_add_cards() {
  return cards_.Add();
}
inline ::game::ProtoCard* Result_EndPlayer::add_cards() {
  // @@protoc_insertion_point(field_add:game.Result.EndPlayer.cards)
  return _internal_add_cards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::ProtoCard >&
Result_EndPlayer::cards() const {
  // @@protoc_insertion_point(field_list:game.Result.EndPlayer.cards)
  return cards_;
}

// -------------------------------------------------------------------

// Result

// repeated .game.Result.EndPlayer end_players = 1;
inline int Result::_internal_end_players_size() const {
  return end_players_.size();
}
inline int Result::end_players_size() const {
  return _internal_end_players_size();
}
inline void Result::clear_end_players() {
  end_players_.Clear();
}
inline ::game::Result_EndPlayer* Result::mutable_end_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.Result.end_players)
  return end_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >*
Result::mutable_end_players() {
  // @@protoc_insertion_point(field_mutable_list:game.Result.end_players)
  return &end_players_;
}
inline const ::game::Result_EndPlayer& Result::_internal_end_players(int index) const {
  return end_players_.Get(index);
}
inline const ::game::Result_EndPlayer& Result::end_players(int index) const {
  // @@protoc_insertion_point(field_get:game.Result.end_players)
  return _internal_end_players(index);
}
inline ::game::Result_EndPlayer* Result::_internal_add_end_players() {
  return end_players_.Add();
}
inline ::game::Result_EndPlayer* Result::add_end_players() {
  // @@protoc_insertion_point(field_add:game.Result.end_players)
  return _internal_add_end_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::Result_EndPlayer >&
Result::end_players() const {
  // @@protoc_insertion_point(field_list:game.Result.end_players)
  return end_players_;
}

// uint32 winner_id = 2;
inline void Result::clear_winner_id() {
  winner_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::_internal_winner_id() const {
  return winner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::winner_id() const {
  // @@protoc_insertion_point(field_get:game.Result.winner_id)
  return _internal_winner_id();
}
inline void Result::_internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  winner_id_ = value;
}
inline void Result::set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winner_id(value);
  // @@protoc_insertion_point(field_set:game.Result.winner_id)
}

// uint32 prize = 3;
inline void Result::clear_prize() {
  prize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::_internal_prize() const {
  return prize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::prize() const {
  // @@protoc_insertion_point(field_get:game.Result.prize)
  return _internal_prize();
}
inline void Result::_internal_set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prize_ = value;
}
inline void Result::set_prize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prize(value);
  // @@protoc_insertion_point(field_set:game.Result.prize)
}

// -------------------------------------------------------------------

// BetTurn

// uint32 player_id = 1;
inline void BetTurn::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::player_id() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.player_id)
  return _internal_player_id();
}
inline void BetTurn::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void BetTurn::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.player_id)
}

// uint32 current_pool = 2;
inline void BetTurn::clear_current_pool() {
  current_pool_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_current_pool() const {
  return current_pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::current_pool() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.current_pool)
  return _internal_current_pool();
}
inline void BetTurn::_internal_set_current_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_pool_ = value;
}
inline void BetTurn::set_current_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_pool(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.current_pool)
}

// uint32 amount = 3;
inline void BetTurn::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::amount() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.amount)
  return _internal_amount();
}
inline void BetTurn::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void BetTurn::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.amount)
}

// uint32 balance = 4;
inline void BetTurn::clear_balance() {
  balance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurn::balance() const {
  // @@protoc_insertion_point(field_get:game.BetTurn.balance)
  return _internal_balance();
}
inline void BetTurn::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  balance_ = value;
}
inline void BetTurn::set_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:game.BetTurn.balance)
}

// -------------------------------------------------------------------

// BetTurnResponse

// uint32 player_id = 1;
inline void BetTurnResponse::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::player_id() const {
  // @@protoc_insertion_point(field_get:game.BetTurnResponse.player_id)
  return _internal_player_id();
}
inline void BetTurnResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void BetTurnResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:game.BetTurnResponse.player_id)
}

// uint32 action = 2;
inline void BetTurnResponse::clear_action() {
  action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::action() const {
  // @@protoc_insertion_point(field_get:game.BetTurnResponse.action)
  return _internal_action();
}
inline void BetTurnResponse::_internal_set_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  action_ = value;
}
inline void BetTurnResponse::set_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:game.BetTurnResponse.action)
}

// uint32 amount = 3;
inline void BetTurnResponse::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BetTurnResponse::amount() const {
  // @@protoc_insertion_point(field_get:game.BetTurnResponse.amount)
  return _internal_amount();
}
inline void BetTurnResponse::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
}
inline void BetTurnResponse::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:game.BetTurnResponse.amount)
}

// -------------------------------------------------------------------

// DoneBet

// uint32 player_id = 1;
inline void DoneBet::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::player_id() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.player_id)
  return _internal_player_id();
}
inline void DoneBet::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void DoneBet::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.player_id)
}

// uint32 bet_amount = 2;
inline void DoneBet::clear_bet_amount() {
  bet_amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_bet_amount() const {
  return bet_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::bet_amount() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.bet_amount)
  return _internal_bet_amount();
}
inline void DoneBet::_internal_set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bet_amount_ = value;
}
inline void DoneBet::set_bet_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bet_amount(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.bet_amount)
}

// uint32 player_balance = 3;
inline void DoneBet::clear_player_balance() {
  player_balance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_player_balance() const {
  return player_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::player_balance() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.player_balance)
  return _internal_player_balance();
}
inline void DoneBet::_internal_set_player_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_balance_ = value;
}
inline void DoneBet::set_player_balance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_balance(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.player_balance)
}

// uint32 action = 4;
inline void DoneBet::clear_action() {
  action_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoneBet::action() const {
  // @@protoc_insertion_point(field_get:game.DoneBet.action)
  return _internal_action();
}
inline void DoneBet::_internal_set_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  action_ = value;
}
inline void DoneBet::set_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:game.DoneBet.action)
}

// -------------------------------------------------------------------

// EndRound

// uint32 total_amount = 1;
inline void EndRound::clear_total_amount() {
  total_amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndRound::_internal_total_amount() const {
  return total_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndRound::total_amount() const {
  // @@protoc_insertion_point(field_get:game.EndRound.total_amount)
  return _internal_total_amount();
}
inline void EndRound::_internal_set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_amount_ = value;
}
inline void EndRound::set_total_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_amount(value);
  // @@protoc_insertion_point(field_set:game.EndRound.total_amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
